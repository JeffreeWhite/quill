@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "is";
@use "const";
@use "string" as String;
@use "list" as List;
@use "../chars";
@use "../units";

@function number($value, $saveUnits: false, $unitType: units.$constNameDistance) {
	@if (meta.type-of($value) == 'number') {
		@return $value;
	}

	@if not (meta.type-of($value) == 'string') {
		@error "Incorrect value type.";
	}

	@return _to-number(String.trim($value), $saveUnits, const.get($unitType), 0, 0);
}


@function _to-number($value, $saveUnits: false, $unitMap: const.get(units.$constNameDistance), $result: 0, $isFloat: 0) {
	$numbMap: const.get(chars.$constNameNumber);

	$character: String.slice($value, 1, 1);
	@if (map.has-key($numbMap, $character)) {
		$result: if($isFloat == 0,
			$result * 10 + map.get($numbMap, $character),
			$result + math.div(map.get($numbMap, $character), math.pow(10, $isFloat))
		);
		$isFloat: if($isFloat != 0, $isFloat + 1, $isFloat);
	}

	@else if $character == '.' {
		$isFloat: $isFloat + 1;
	}

	@else if ($saveUnits and map.has-key($unitMap, $value)) {
		$result: $result * map.get($unitMap, $value);
		$value: '';
	}

	@return if(String.length($value) > 0,
		_to-number(String.slice($value, 2), $saveUnits, $unitMap, $result, $isFloat),
		$result
	);
}