@use 'sass:map';

@use "../settings";
@use "sass:list";
@use "sass:math";
@use "sass:meta";

@use "../../../vendor/core/is" as is;
@use "../../../vendor/core/string";
@use "../../../vendor/core/list" as lst;
@use "../../../vendor/core/list" as List;
@use "../../../vendor/core/to";
@use "../../../vendor/core/const";

@use 'device';
@use 'range';
@use 'discrete';

@function parse($_condition_) {
    @if (is.empty($_condition_)) {
        @return "";
    }

    $expressions: ();

    $device: device.parse($_condition_);
    @if not (is.empty($device)) {
        @return map.deep-merge($expressions, (
            'device': list.append(
                if(map.has-key($expressions, 'device'),
                    map.get($expressions, 'device'), ()
                ), $device, 'comma'
            )
        ));
    }

    $featureMap: _parse-feature($_condition_);
    @if ($featureMap != null) {
        @each $context, $condition in _parse-conditions($_condition_, $featureMap) {
            $operator:  _parse-operator($condition, map.get($featureMap, 'type'));
            $condition: string.trim(string.replace($condition, $operator));
            $expressions: map.deep-merge($expressions, (
                'features': if(map.get($featureMap, 'type') == 'range',
                    range.parse($condition, $operator, $context, $featureMap),
                    discrete.parse($condition, $featureMap)
                )
            ));
        }
    }

    @return $expressions;
}



@function _parse-conditions($condition, $featureMap) {
    $featureType: map.get($featureMap, 'type');
    $featureAlias: map.get($featureMap, 'alias');
    $conditionList: string.split($condition, $featureAlias);

    $conditionMap: ();
    @for $i from 1 through List.length($conditionList) {
        @if List.nth($conditionList, $i) != '' {
            @if ($i == 1 and $featureType != 'discrete') {
                $conditionMap: map.deep-merge($conditionMap,
                    ('left': List.nth($conditionList, $i))
                )
            }

            @if ($i == 2) {
                $conditionMap: map.deep-merge($conditionMap,
                    ('right': List.nth($conditionList, $i))
                )
            }
        }
    }

    @return $conditionMap;
}


@function _parse-feature($condition) {
    @each $featureAlias, $featureMap in settings.get-feature-map() {
        @if (string.index($condition, $featureAlias)) {
            @return map.deep-merge($featureMap, (
                'alias': $featureAlias
            ));
        }
    }

    @return null;
}





@function _parse-operator($condition, $featureType) {
    @each $operator in settings.get-operator-list($featureType) {
        @if (string.index($condition, $operator)) {
            @return $operator;
        }
    }
}
