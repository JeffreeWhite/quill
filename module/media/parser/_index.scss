@use 'sass:map';

@use "../settings";
@use "sass:list";
@use "sass:math";
@use "sass:meta";

@use "../../../vendor/core/is" as is;
@use "../../../vendor/core/string";
@use "../../../vendor/core/list" as lst;
@use "../../../vendor/core/list" as List;
@use "../../../vendor/core/to";
@use "../../../vendor/core/const";

@use 'device';
@use 'feature';
@use 'operator';
@use 'conditions';
@use 'range';
@use 'discrete';

@function parse($_condition_) {
    @if (is.empty($_condition_)) {
        @return "";
    }

    $expressions: ();

    $device: device.parse($_condition_);
    @if not (is.empty($device)) {
        @return map.deep-merge($expressions, (
            'device': list.append(
                if(map.has-key($expressions, 'device'),
                    map.get($expressions, 'device'), ()
                ), $device, 'comma'
            )
        ));
    }

    $featureMap: feature.parse($_condition_);
    @if not (is.empty($featureMap)) {
        @each $context, $condition in conditions.parse($_condition_, $featureMap) {
            $operator:  operator.parse($condition, map.get($featureMap, 'type'));
            $condition: string.trim(string.replace($condition, $operator));
            $expressions: map.deep-merge($expressions, (
                'features': if(map.get($featureMap, 'type') == 'range',
                    range.parse($condition, $operator, $context, $featureMap),
                    discrete.parse($condition, $featureMap)
                )
            ));
        }
    }

    @return $expressions;
}
