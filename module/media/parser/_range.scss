@use 'sass:map';
@use 'sass:math';

@use '../settings';
@use '../../../vendor/core/is';
@use '../../../vendor/core/to';
@use '../../../vendor/core/list';
@use '../../../vendor/core/const';
@use '../../../vendor/core/string';


///
/// @param {String} $value
/// @param {String} $operator
/// @param {String} $context
/// @param {Map} $featureMap
///
/// @return {Map}
///
@function parse($value, $operator, $context, $featureMap) {
    $dimension: _calc-dimension($operator, $context);
    $value: _find-value($value, $featureMap);
    $units: _find-units($value, $featureMap);
    $value: _calc-interval($value, $units, $operator, $dimension);

    @return ('#{$dimension}#{map.get($featureMap, 'name')}': $value);
}


///
/// @param {String} $operator
/// @param {String} $context
/// @param {String} $featureType
///
/// @return {String|Null}
///
@function _calc-dimension($operator, $context) {
    $result: '';

    @if (list.index(('<=', '<'), $operator)) {
        $result: if($context == 'left', 'min-', 'max-');
    } @else if (list.index(('>=', '>'), $operator)) {
        $result: if($context == 'left', 'max-', 'min-');
    }

    @return $result;
}


///
/// @param {String} $value
/// @param {Map} $featureMap
///
/// @return {Number}
///
@function _find-value($value, $featureMap) {
    @if is.empty($value) {
        @error "";
    }

    $featureUnits: map.get($featureMap, 'units');
    $featurePoints: map.get($featureMap, 'points');
    @return if(not is.empty($featurePoints) and map.has-key($featurePoints, $value),
        to.number(map.get($featurePoints, $value), true, $featureUnits),
        to.number($value, true, $featureUnits)
    );
}


///
/// @param {String} $value
/// @param {Map} $featureMap
///
/// @return {String}
///
@function _find-units($value, $featureMap) {
    $featureUnits: const.get(map.get($featureMap, 'units'));

    @if (math.is-unitless($value)) {
        @error "is unitless";
    }

    $unit: math.unit($value);

    @if not (map.has-key($featureUnits, $unit)) {
        @error "not a unit";
    }

    @return $unit;
}


///
/// @param {Number} $value
/// @param {String} $unit
/// @param {String} $operator
/// @param {String} $dimension
///
/// @return {Number}
///
@function _calc-interval($value, $unit, $operator, $dimension) {
    @if not (map.has-key(settings.get-interval-map(), $unit)) or (is.empty($dimension)) {
        @return $value;
    }

    $interval: map.get(settings.get-interval-map(), $unit);

    @if (string.index($operator, '=') == 2) {
        $value: if($dimension == 'min-', $value + $interval, $value - $interval);
    }

    @return $value;
}