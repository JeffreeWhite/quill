@use 'sass:map';
@use 'sass:math';

@use '../settings';
@use '../../../vendor/core/is';
@use '../../../vendor/core/to';
@use '../../../vendor/core/list';
@use '../../../vendor/core/const';
@use '../../../vendor/core/string';

@function parse($condition, $operator, $context, $featureMap) {
	$dimension: _calc-dimension($operator, $context, 'range');
	$value: _parse-range-value($condition, $operator, $dimension, $featureMap);

	@return ('#{$dimension}#{map.get($featureMap, 'name')}': $value);
}

@function _parse-range-value($value, $operator, $dimension, $featureMap) {
	$value: _find-value($value, $featureMap);
	$units: _find-units($value, $featureMap);
	$value: _calc-interval($value, $units, $operator, $dimension);

	@return $value;
}

@function _find-units($stringValue, $featureMap) {
	$featureUnits: const.get(map.get($featureMap, 'units'));

	@if (math.is-unitless($stringValue)) {
		@error "is unitless";
	}

	$unit: math.unit($stringValue);

	@if not (map.has-key($featureUnits, $unit)) {
		@error "not a unit";
	}

	@return $unit;
}
@function _calc-dimension($operator, $context, $featureType) {
	$result: '';

	@if ($featureType == 'discrete') {
		@return $result;
	}

	@if (list.index(('<=', '<'), $operator)) {
		$result: if($context == 'left', 'min-', 'max-');
	}
	@else if (list.index(('>=', '>'), $operator)) {
		$result: if($context == 'left', 'max-', 'min-');
	}

	@return $result;
}

@function _find-value($value, $featureMap) {
	@if is.empty($value) {
		@error "";
	}

	$featureUnits: map.get($featureMap, 'units');
	$featurePoints: map.get($featureMap, 'points');
	@return if(not is.empty($featurePoints) and map.has-key($featurePoints, $value),
		to.number(map.get($featurePoints, $value), true, $featureUnits),
		to.number($value, true, $featureUnits)
	);
}

@function _calc-interval($value, $unit, $operator, $dimension) {
	@if not (map.has-key(settings.get-interval-map(), $unit)) or (is.empty($dimension)) {
		@return $value;
	}

	$interval: map.get(settings.get-interval-map(), $unit);

	@if (string.index($operator, '=') == 2) {
		$value: if($dimension == 'min-', $value + $interval, $value - $interval);
	}

	@return $value;
}