@use "settings";
@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

@use "../../vendor/core/string" as str;
@use "../../vendor/core/list" as lst;
@use "../../vendor/core/list" as List;



@mixin query($conditions...) {
    $expression: processing((), 1, 1, $conditions...);
    $expression: post-processing($expression);
    @media #{building($expression)} {
        @content;
    }
}




@function post-processing($expressions) {
    $expressionList: ();

    @each $key, $queryMap in $expressions {
        $resultList: if(map.has-key($queryMap, 'type'),
            list.join((), map.keys(map.get($queryMap, 'type')), 'comma'), ()
        );

        @each $dimension, $value in map.get($queryMap, 'features') {
            $resultList: list.join($resultList, ('(#{$dimension}: #{$value})'), 'comma')
        }

        $expressionList: list.append($expressionList, $resultList, 'comma');
    }

    @return $expressionList;
}

@function processing($expressions, $expCounter: 1, $condCounter: 1, $_conditions_...) {
    $_condition: "";

    @if (list.length($_conditions_) < 1) {
        @return $expressions;
    }

    $_condition: list.nth($_conditions_, 1);

    @if ($_condition == null or $_condition == () or $_condition == '') {
        @return $expressions;
    }

    $_conditions_: lst.slice($_conditions_);
    @return if(
        meta.type-of($_condition) == 'list',
        processing(map.deep-merge($expressions,
          processing($expressions, $expCounter, 1, $_condition...)),
          $expCounter + 1, $condCounter + 1, $_conditions_...
        ),
        processing(map.deep-merge($expressions,
          (#{$expCounter}: parse-expression($_condition, $expCounter, $condCounter, $expressions))),
          $expCounter, $condCounter + 1, $_conditions_...
        )
    );
}


@function building($queryList, $queryChunk: ()) {
    @if ($queryChunk == () and list.length($queryList) > 0) {
        $chunk: list.nth($queryList, 1);
    }

    @if (list.length($queryChunk) < 2) {
        @return if(list.length($queryList) > 1,
          #{list.nth($queryChunk, 1)} + ' , ' + building(List.slice($queryList)),
          #{list.nth($queryChunk, 1)}
        )
    }

    @return #{list.nth($queryChunk, 1)} + ' and ' + building($queryList, List.slice($queryChunk));
}

@function parse-expression($_condition_, $expCounter, $condCounter, $expression-map) {
    @if ($_condition_ == null or $_condition_ == ()) {
        @return "";
    }

    $expressions: ();
    $parameters: ();

    $type: parse-type($_condition_);
    @if ($type != null) {
        $expressions: map.deep-merge($expressions, (
          'type': ($type: $type)
        ));
    }

    $parameters: parse-feature($_condition_, $parameters);
    @if ($parameters != null) {
        $conditions: parse-conditions($_condition_, $parameters);
        @each $context, $condition in $conditions {
            $feature: map.get($parameters, 'feature', 'name');
            $operator: parse-operator($condition, $parameters);
            $dimension: get-dimension($operator, $context);
            $value: parse-value($condition, $operator, $parameters);

            $expressions: map.deep-merge($expressions, (
              'features': ('#{$dimension}-#{$feature}': $value)
            ));
        }
    }

    @return $expressions;
}




@function parse-type($condition) {
    @each $type in settings.get-type-list() {
        @if ($type == $condition) {
            @return $type;
        }
    }

    @return null;
}




@function parse-conditions($condition, $parameters) {
    $alias: map.get($parameters, 'feature', 'alias');
    $condition: str.replace($condition, ' ', '');
    $condition-list: str.split($condition, $alias);

    $condition-map: ();
    @for $i from 1 through list.length($condition-list) {
        @if list.nth($condition-list, $i) != '' {
            @if ($i == 1) {
                $condition-map: map.deep-merge($condition-map, ('left': list.nth($condition-list, $i)))
            }
            @if ($i == 2) {
                $condition-map: map.deep-merge($condition-map, ('right': list.nth($condition-list, $i)))
            }
        }
    }

    @return $condition-map;
}


@function parse-feature($condition, $parameters) {
    @each $feature-alias, $feature-params in settings.get-feature-list() {
        @if (str.index($condition, $feature-alias)) {
            $feature-params: map.set($feature-params, 'alias', $feature-alias);
            @return map.deep-merge($parameters, (
              'feature': $feature-params
            ));
        }
    }

    @return null;
}


@function get-dimension($operator, $context) {
    $result: '';

    @if (list.index(('<=', '<'), $operator)) {
        $result: if($context == 'left', 'min', 'max');
    } @else if (list.index(('>=', '>'), $operator)) {
        $result: if($context == 'left', 'max', 'min');
    }

    @return $result;
}


@function parse-operator($_condition_, $parameters) {
    $feature-type: map.get($parameters, 'feature', 'type');
    @each $operator in settings.get-operator-list($feature-type) {
        @if (str.index($_condition_, $operator)) {
            @return $operator;
        }
    }
}


@function parse-value($condition, $operator, $parameters) {
    $raw-value: str.trim(str.replace($condition, $operator, ''));
    $breakpoints: map.get($parameters, 'feature', 'breakpoints');

    $value: if(
        map.has-key($breakpoints, unquote($raw-value)),
        map.get($breakpoints, unquote($raw-value)),
        $raw-value
    );

    @return to-number($value);
}

@function to-number($value) {
    @if meta.type-of($value) == 'number' {
        @return $value;
    } @else if meta.type-of($value) != 'string' {
        @error "";
        //$_: im-log('Value for `to-number` should be a number or a string.');
    }

    $first-character: str.slice($value, 1, 1);
    $result: 0;
    $digits: 0;
    $minus: ($first-character == '-');
    $numbers: (
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
    );

    // Remove +/- sign if present at first character
    @if ($first-character == '+' or $first-character == '-') {
        $value: str.slice($value, 2);
    }

    @for $i from 1 through str.length($value) {
        $character: str.slice($value, $i, $i);

        @if not(list.index(map.keys($numbers), $character) or $character == '.') {
            @return to-length(if($minus, -$result, $result), str.slice($value, $i));
        }

        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map.get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + math.div(map.get($numbers, $character), $digits);
        }
    }

    @return if($minus, -$result, $result);
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
    $units: (
      'px': 1px,
      'cm': 1cm,
      'mm': 1mm,
      '%': 1%,
      'ch': 1ch,
      'pc': 1pc,
      'in': 1in,
      'em': 1em,
      'rem': 1rem,
      'pt': 1pt,
      'ex': 1ex,
      'vw': 1vw,
      'vh': 1vh,
      'vmin': 1vmin,
      'vmax': 1vmax,
    );

    @if not list.index(map.keys($units), $unit) {
        //$_: im-log('Invalid unit `#{$unit}`.');
    }

    @return $value * map.get($units, $unit);
}


$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1,
  '': 0,
) !default;