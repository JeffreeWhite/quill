@use "sass:meta";
@use "sass:string";
@use "sass:math";

@function to-number($value) {
    @if type-of($value) == 'number' {
        @return $value;
    } @else if type-of($value) != 'string' {
        @error 'Value for `to-number` should be a number or a string.';
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if (index(map-keys($numbers), $character) or $character == '.') {
            @if $character == '.' {
                $digits: 1;
            } @else if $digits == 0 {
                $result: $result * 10 + map-get($numbers, $character);
            } @else {
                $digits: $digits * 10;
                $result: $result + map-get($numbers, $character) / $digits;
            }
        }
    }

    @return if($minus, -$result, $result);
}

@mixin __simple-col($value, $padding) {
    flex-basis: $value;
    max-width: $value;
    padding-left: $padding;
    padding-right: $padding;
}


@mixin col($width, $padding: 15px) {
    $values: "";

    @if ($width == null) {
        @error "Incorect value of the $width parameter";
    }
    @if (meta.type-of($width) == "string") {
        $values: string.unquote($width);
    }
    @if (string.index($values, "/") != null) {
        $first: to-number(string.slice($values, 0, 1));
        $second: to-number(string.slice($values, string.length($values), -1));

        @debug $first;
        @debug $second;

        $values: math.percentage($first / $second);
    }

    @include __simple-col($values, $padding);
}